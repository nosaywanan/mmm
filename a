package com.hikvision.skin;

import android.app.Activity;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.util.SparseArray;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.Window;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.List;

import static android.view.View.NO_ID;
import static android.view.Window.ID_ANDROID_CONTENT;

public class NiksTemplate {
    public static void replaceTemplate(int layout, Activity activity){
        ViewGroup template = (ViewGroup) activity.getLayoutInflater().inflate(layout,null);
        SparseArray<NiksView> templateViewMap =new SparseArray<>();
        tmpViewId(new NiksViewGroup(null,template),templateViewMap);
        ViewGroup content =  activity.findViewById(ID_ANDROID_CONTENT);
        SparseArray<NiksView> contentViewMap =new SparseArray<>();
        tmpViewId(new NiksViewGroup(null,content),contentViewMap);

        for (int i = 0; i < contentViewMap.size(); i++) {
            int id = contentViewMap.keyAt(i);
            NiksView raw = contentViewMap.get(id);
            NiksView temp = templateViewMap.get(id);
            if (temp==null)
                continue;
            if (raw instanceof  NiksViewGroup){
                Log.e("niks","viewgroup");
                replaceViewGroup(raw.view,temp.view);
                //replaceViewGroup( raw.view,temp.view);
            }else {
                ((ViewGroup)raw.parent.view).removeView(raw.view);
                int index =  ((ViewGroup)temp.parent.view).indexOfChild(temp.view);
                Log.e("niks","view" +index);
                ((ViewGroup)temp.parent.view).removeView(temp.view);
                replaceViewAttribute(raw,temp);
                ((ViewGroup)temp.parent.view).addView(raw.view,index);
            }

        }
        activity.setContentView(template);
    }

    private static void replaceViewAttribute(NiksView raw, NiksView temp) {
        raw.view.setLayoutParams(temp.view.getLayoutParams());
        raw.view.setPadding(temp.view.getPaddingLeft(),temp.view.getPaddingTop(),temp.view.getPaddingRight(),temp.view.getPaddingBottom());
        raw.view.setBackground(temp.view.getBackground());
        raw.view.setMinimumWidth(temp.view.getMinimumWidth());
        raw.view.setMinimumHeight(temp.view.getMinimumHeight());
        raw.view.setForeground(temp.view.getForeground());
    }

    private static void replaceViewGroup(View raw ,View temp) {
        temp.setBackground(raw.getBackground());
        //raw.setOnClickListener();
        Class<?> viewClass = raw.getClass();
        Class<?> tempClass = temp.getClass();
        while (viewClass!=View.class){
            viewClass=viewClass.getSuperclass();
        }
        while (tempClass!=View.class){
            tempClass=tempClass.getSuperclass();
        }
        try {
            Method method=viewClass.getDeclaredMethod("getListenerInfo");
            method.setAccessible(true);
            Object o= method.invoke(raw);
            replaceViewListener(o,temp,tempClass);
        } catch (Exception e) {
            e.printStackTrace();
            Log.e("niks","reflect " +e.getMessage());
        }
    }

    private static void replaceViewListener(Object o, View view,Class<?> viewClass) throws IllegalAccessException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException {
        for (Field field : o.getClass().getDeclaredFields()) {
            Object ls = field.get(o);
            if (ls ==null)
                continue;
            Class<?>[] innerClasses = viewClass.getDeclaredClasses();
            field.setAccessible(true);
            String paramName = field.getName();
            paramName = paramName.substring(1,paramName.length());
            String setMethod ="set"+paramName;
            Log.e(" replace ls ", paramName +" : " + setMethod);
            Class<?> lsClass =null;
            for (Class<?> innerClass : innerClasses) {
                if (innerClass.getCanonicalName().contains(paramName)){
                    lsClass = innerClass;
                    break;
                }
            }
            Method method =viewClass.getDeclaredMethod(setMethod,lsClass);
            method.setAccessible(true);
            method.invoke(view,ls);
        }
    }

    private static void tmpViewId(NiksViewGroup template, SparseArray<NiksView> viewMap) {
        for (int i = 0; i < template.getChildCount(); i++) {
            NiksView child = template.getChildAt(i);
            int id = child.view.getId();
            if (id != NO_ID){
                viewMap.put(id,child);
            }
            if (child instanceof  NiksViewGroup){
                tmpViewId((NiksViewGroup) child,viewMap);
            }
        }
    }

}
